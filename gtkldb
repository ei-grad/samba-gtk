#!/usr/bin/python
# coding: utf-8
#
# Unix SMB/CIFS implementation.
# Copyright (C) Jelmer Vernooij <jelmer@samba.org> 2007
# Copyright (C) Andrew Grigorev <andrew@ei-grad.ru> 2009
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

"""Simple GTK+ frontend for LDB."""

import os
import sys
import gtk
import gobject
import ldb


class LdbURLDialog(gtk.Dialog):
    """Dialog that prompts for a LDB URL.
    
    Ideally this should remember LDB urls and list them in a combo box.
    """
    
    def __init__(self, parent=None):
        """Create a new LdbURLDialog.
        
        parent -- Parent window.
        """
        super(LdbURLDialog, self).__init__(parent=parent,
                buttons=(gtk.STOCK_CANCEL, gtk.RESPONSE_CANCEL,
                         gtk.STOCK_OPEN, gtk.RESPONSE_OK))
        hbox = gtk.HBox()
        hbox.set_border_width(5)
        hbox.set_spacing(5)
        hbox.pack_start(gtk.Label("Enter URL:"), expand=False)
        self.url = gtk.Entry()
        hbox.pack_end(self.url)
        self.vbox.add(hbox)
        self.show_all()
        
    def get_url(self):
        """Return url."""
        return self.url.get_text()


class AddObjectDialog(gtk.Dialog):
    """Dialog that prompts for an object name, classes and properties."""
    
    def __init__(self, parent=None):
        """Create a new AddObjectDialog.
        
        parent -- Parent window.
        """
        super(AddObjectDialog, self).__init__(parent=parent,
            buttons=(gtk.STOCK_CANCEL, gtk.RESPONSE_CANCEL,
                     gtk.STOCK_ADD, gtk.RESPONSE_OK),
            title="Add an object")
        
        hbox = gtk.HBox()
        hbox.set_border_width(5)
        hbox.set_spacing(5)
        hbox.pack_start(gtk.Label("DN:"), expand=False)
        self.dn_entry = gtk.Entry()
        hbox.pack_end(self.dn_entry)
        self.vbox.add(hbox)
        self.show_all()
        
    def get_dn(self):
        """Return a DN string"""
        return self.dn_entry.get_text()


def Ldb(url):
    """Create a new LDB object.
    
    url -- LDB URL to connect to.
    """
    ret = ldb.Ldb()
    path = os.getenv("LDB_MODULES_PATH")
    if path is not None:
        ret.set_modules_dir(path)
    ret.connect(url)
    return ret


class LdbBrowser(gtk.Window):
    """GTK+ based LDB browser."""
    
    ldb = None
    hide_special = False
    
    def set_ldb(self, ldb):
        """Change the LDB object displayed.
        
        Will refresh the window.
        ldb -- New LDB object to use.
        """
        self.ldb = ldb
        self.menu_disconnect.set_sensitive(True)
        self._fill_tree()
        
    def _cb_connect(self, button):
        dialog = LdbURLDialog()
        if dialog.run() == gtk.RESPONSE_OK:
            try:
                self.set_ldb(Ldb(dialog.get_url()))
            except ldb.LdbError, err:
                dialog2 = gtk.MessageDialog(self,
                    gtk.DIALOG_DESTROY_WITH_PARENT, gtk.MESSAGE_ERROR,
                    gtk.BUTTONS_CLOSE, str(err))
                # Close dialog on user response
                dialog2.connect ("response", lambda d, r: d.destroy())
                dialog2.show()
        dialog.destroy()
        
    def _cb_open(self, button):
        dialog = gtk.FileChooserDialog(title="Please choose a file",
            parent=self,
            buttons=(gtk.STOCK_CANCEL, gtk.RESPONSE_CANCEL,
                gtk.STOCK_OPEN, gtk.RESPONSE_OK))
        if dialog.run() == gtk.RESPONSE_OK:
            self.set_ldb(Ldb(dialog.get_filename()))
            
        dialog.destroy()
        
    def _cb_disconnect(self, button):
        self.treemodel.clear()
        self.attributemodel.clear()
        self.menu_disconnect.set_sensitive(False)
        self.ldb = None
        
    def _add_node(self, dn, parent=""):
        if dn.is_special() and self.hide_special:
            return None
        _dn = str(dn)
        text = _dn[:len(_dn)-len(parent)].rstrip(",")
        self.treenodes[_dn] = self.treemodel.append(
            self.treenodes[parent], [text, dn])
        for i in self.ldb.search(dn, ldb.SCOPE_ONELEVEL, None, ['dn']):
            self._add_node(i.dn, _dn)
            
    def _fill_tree(self):
        def _first_level(msg):
            """Return list of DN without parent."""
            # FIXME: this actually work only for one-level messages
            # for example, it don't work if ldb contains
            # messages "DC=ru" and "DC=example,DC=com"
            lev = sys.maxint
            ret = []
            spec = []
            for i in msg:
                dn = i.dn
                l = str(dn).count(',')
                if dn.is_special():
                    spec.append(dn)
                elif l < lev:
                    ret = [dn]
                    lev = l
                elif l == lev:
                    ret.append(dn)
            return ret + spec
        
        self.treemodel.clear()
        self.treenodes = {}
        self.treenodes[""] = None
        
        for dn in _first_level(self.ldb.search(None, ldb.SCOPE_SUBTREE,
                                                   None, ['dn'])):
            self._add_node(dn)
            
    def _toggle_special_entries(self, item):
        self.hide_special = item.get_active()
        if self.ldb != None:
            self._fill_tree()
            
    def _treeview_cursor_cb(self, item):
        (model, iter) = item.get_selection().get_selected()
        dn = model.get_value(iter, 1)
        self.attributemodel.clear()
        msg = self.ldb.search(dn, ldb.SCOPE_BASE)
        if len(msg) > 0:
            for name, el in msg[0].items():
                if name == "dn":
                    continue
                for val in set(el):
                    self.attributemodel.append([name, val, el])
                    
    def add_object(self, action):
        """Add object to ldb, and append it to tree."""
        if self.ldb == None:
            dialog = gtk.MessageDialog(self,
                gtk.DIALOG_DESTROY_WITH_PARENT | gtk.DIALOG_MODAL,
                gtk.MESSAGE_INFO, gtk.BUTTONS_CLOSE,
                "Connect to LDB database first.")
            # Close dialog on user response
            dialog.connect ("response", lambda d, r: d.destroy())
            dialog.show()
            return
        dialog = AddObjectDialog()
        if dialog.run() == gtk.RESPONSE_OK:
            try:
                _dn = dialog.get_dn()
                dialog.destroy()
                dn = ldb.Dn(self.ldb, _dn)
                msg = ldb.Message(dn)
                self.ldb.add(msg)
                # ldb.add cause ldb to add more than one entry
                # DC=test
                # @BASEINFO
                # |-DC=test
#                parent_dn = dn.parent()
#                if parent_dn.is_valid() and \
#                    str(parent_dn) in self.treenodes.keys():
#                        self._add_node(dn, str(parent_dn))
#                else:
#                    self._add_node(dn)
                self._fill_tree()
            except (ldb.LdbError, ValueError), err:
                dialog2 = gtk.MessageDialog(self,
                    gtk.DIALOG_DESTROY_WITH_PARENT, gtk.MESSAGE_ERROR,
                    gtk.BUTTONS_CLOSE, str(err))
                # Close dialog on user response
                dialog2.connect ("response", lambda d, r: d.destroy())
                dialog2.show()
        else:
            dialog.destroy()
            
    def _cb_delete_object(self, action):
        """Show dialog that prompts for DN, and delete it."""
        if self.ldb == None:
            dialog = gtk.MessageDialog(self,
                gtk.DIALOG_DESTROY_WITH_PARENT | gtk.DIALOG_MODAL,
                gtk.MESSAGE_INFO, gtk.BUTTONS_CLOSE,
                "Connect to LDB database first.")
            # Close dialog on user response
            dialog.connect ("response", lambda d, r: d.destroy())
            dialog.show()
            return
        dialog = gtk.Dialog(parent=self, buttons=(gtk.STOCK_CANCEL,
            gtk.RESPONSE_CANCEL, gtk.STOCK_DELETE, gtk.RESPONSE_OK),
            title="Enter DN:")
        dn_entry = gtk.Entry()
        dialog.vbox.add(dn_entry)
        dialog.show_all()
        if dialog.run() == gtk.RESPONSE_OK:
            try:
                _dn = dn_entry.get_text()
                dialog.destroy()
                self.ldb.delete(ldb.Dn(self.ldb, _dn))
                self._fill_tree()
            except (ldb.LdbError, ValueError), err:
                dialog2 = gtk.MessageDialog(self,
                    gtk.DIALOG_DESTROY_WITH_PARENT, gtk.MESSAGE_ERROR,
                    gtk.BUTTONS_CLOSE, str(err))
                # Close dialog on user response
                dialog2.connect ("response", lambda d, r: d.destroy())
                dialog2.show()
        else:
            dialog.destroy()

    def about_dialog(self):
        dialog = gtk.AboutDialog()
        dialog.set_name(self.get_title())
        dialog.set_website("http://www.samba.org/")
        ## Close dialog on user response
        dialog.connect ("response", lambda d, r: d.destroy())
        dialog.show()

    def __init__(self):
        """Create a new LdbBrowser."""
        super(LdbBrowser, self).__init__()
        vbox = gtk.VBox(spacing=0)
        
        # Menu
        self.menu = gtk.MenuBar()
        
        # menu_db
        menuitem_db = gtk.MenuItem("_Database")
        menu_db = gtk.Menu()
        menuitem_db.set_submenu(menu_db)
        self.menu.add(menuitem_db)
        
        menu_connect = gtk.ImageMenuItem(gtk.STOCK_CONNECT)
        menu_connect.connect('activate', self._cb_connect)
        menu_db.add(menu_connect)
        
        menu_open = gtk.ImageMenuItem(gtk.STOCK_OPEN)
        menu_open.connect('activate', self._cb_open)
        menu_db.add(menu_open)
        
        self.menu_disconnect = gtk.ImageMenuItem(gtk.STOCK_DISCONNECT)
        self.menu_disconnect.connect('activate', self._cb_disconnect)
        self.menu_disconnect.set_sensitive(False)
        menu_db.add(self.menu_disconnect)
        
        menu_db.add(gtk.SeparatorMenuItem())
        
        menu_hide_special = gtk.CheckMenuItem("_Hide special entries")
        menu_hide_special.connect('toggled', self._toggle_special_entries)
        menu_db.add(menu_hide_special)
        
        menu_db.add(gtk.SeparatorMenuItem())
        
        menu_exit = gtk.ImageMenuItem(gtk.STOCK_QUIT)
        menu_exit.connect('activate', lambda x: gtk.main_quit())
        menu_db.add(menu_exit)
        
        # menu_edit
        menuitem_edit = gtk.MenuItem("_Record")
        self.menu_edit = gtk.Menu()
        menuitem_edit.set_submenu(self.menu_edit)
        self.menu.add(menuitem_edit)
        
        menu_add_message = gtk.ImageMenuItem(gtk.STOCK_ADD)
        menu_add_message.connect('activate', self.add_object)
        self.menu_edit.add(menu_add_message)
        
        menu_delete_message = gtk.ImageMenuItem(gtk.STOCK_DELETE)
        menu_delete_message.connect('activate', self._cb_delete_object)
        self.menu_edit.add(menu_delete_message)
        
        # menu_help
        menuitem_help = gtk.MenuItem("_Help")
        self.menu_help = gtk.Menu()
        menuitem_help.set_submenu(self.menu_help)
        self.menu.add(menuitem_help)
        
        menu_about = gtk.ImageMenuItem(gtk.STOCK_ABOUT)
        menu_about.connect('activate', lambda x: self.about_dialog())
        self.menu_help.add(menu_about)
        
        vbox.pack_start(self.menu, expand=False)
        
        self.treeview = gtk.TreeView()
        self.treemodel = gtk.TreeStore(gobject.TYPE_STRING,
            gobject.TYPE_PYOBJECT)
        self.treeview.set_model(self.treemodel)
        self.treeview.set_headers_visible(False)
        self.treeview.append_column(gtk.TreeViewColumn("_Dn",
                                    gtk.CellRendererText(), text=0))
        self.treeview.connect("cursor-changed", self._treeview_cursor_cb)
        self.attributeview = gtk.TreeView()
        self.attributemodel = gtk.ListStore(str, str, gobject.TYPE_PYOBJECT)
        self.attributeview.set_model(self.attributemodel)
        self.attributeview.append_column(gtk.TreeViewColumn("_Name",
                                         gtk.CellRendererText(), text=0))
        self.attributeview.append_column(gtk.TreeViewColumn("_Value",
                                         gtk.CellRendererText(), text=1))
        pane = gtk.HPaned()
        pane.set_position(200)
        pane.set_border_width(5)
        treeview_window = gtk.ScrolledWindow()
        treeview_window.set_shadow_type(gtk.SHADOW_IN)
        treeview_window.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
        treeview_window.add(self.treeview)
        pane.pack1(treeview_window, resize=True, shrink=True)
        attributeview_window = gtk.ScrolledWindow()
        attributeview_window.set_shadow_type(gtk.SHADOW_IN)
        attributeview_window.set_policy(gtk.POLICY_AUTOMATIC,
            gtk.POLICY_AUTOMATIC)
        attributeview_window.add(self.attributeview)
        pane.pack2(attributeview_window, shrink=True)
        vbox.pack_start(pane, fill=True, expand=True)
        
        self.statusbar = gtk.Statusbar()
        vbox.pack_end(self.statusbar, expand=False)
        
        self.add(vbox)
        self.connect("destroy", gtk.main_quit)
        self.set_default_size(700, 500)
        self.set_title("GTKLDB Editor")
        self.show_all()


def main():
    browser = LdbBrowser()
    if len(sys.argv) > 1:
        browser.set_ldb(Ldb(sys.argv[1]))
    gtk.main()
    
if __name__ == "__main__":
    main()
